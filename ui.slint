import { Button } from "std-widgets.slint";

struct BombData := {
    icon: string,
    is-bomb: bool,
}

global BombField := {
    property <int> num-to-win;
    property <bool> is-lost;
}

BombTile := Rectangle {
    callback clicked <=> bn.clicked;

    property <string> label;
    property <bool> is-revealed;
    property <bool> is-blank;
    property <bool> is-bomb;
    property <int> index;

    clip: true;
    height: 50px;
    width: 50px;
    border-radius: 8px;
    background: is-revealed ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    bn := Button {
        text: label;

        clicked => { 
            if (!is-revealed) {
                is-revealed = true;

                if (is-bomb) {
                    BombField.is-lost = true;
                }
                else {
                    BombField.num-to-win -= 1;
                }
            }
        }
    }

    // curtain
    Rectangle {
        border-radius: 8px;
        background: #193076;
        width: is-revealed ? 0px : parent.width;
        height: parent.height;
        animate width { duration: 100ms; easing: ease-in; }
    }
}

export App := Window {
    title: "ðŸ’£ Bomb Field ðŸ˜ˆ";

    property <int>          num-to-win <=> BombField.num-to-win;
    property <int>          bombfield-col;
    property <int>          bombfield-row;
    property <[BombData]>   bombfield-list;

    property <length>       tile-size: 50px;
    property <length>       tile-spacing: 5px;
    property <int>          current-index: -1;

    // "column_count + 1" and "row_count + 1" are the number of gaps between the tiles.
    width: (bombfield-col * tile-size) + ((bombfield-col + 1) * tile-spacing);
    height: (bombfield-row * tile-size) + ((bombfield-row + 1) * tile-spacing);

    for tile[i] in (bombfield-row*bombfield-col): BombTile {
        x: tile-spacing + mod(i, bombfield-col) * (tile-size + tile-spacing);
        y: tile-spacing + floor(i / bombfield-row) * (tile-size + tile-spacing);
        width: tile-size;
        height: tile-size;
        index: i;
        label: root.bombfield-list[i].icon;
        is-bomb: root.bombfield-list[i].is-bomb;
    }

    lost := Image {
        height: parent.height;
        source: @image-url("assets/bomb.jpg");
        width: BombField.is-lost ? parent.width : 0px;
        animate width { duration: 250ms; easing: ease-in; }
    }
    
    won:= Image {
        height: parent.height;
        source: @image-url("assets/win.jpg");
        width: BombField.num-to-win == 0 ? parent.width : 0px;
        animate width { duration: 250ms; easing: ease-in; }
    }
}